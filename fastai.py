# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X4kv_d6WVe5-L4I2RYLriCveEZO_eHzg
"""

!unzip 0664343c9a8f11ea.zip

import pandas as pd
train = pd.read_csv('dataset/train.csv')
test = pd.read_csv('dataset/test.csv')
print(train.head())

from fastai.imports import *
from fastai import *
from fastai.vision import *
from torchvision.models import *

path = 'dataset/'
test_path = path+'test/'
def generateSubmission(learn, string):
    id_list=list(test.Image)
    label=[]
    for iname in id_list:
        img=open_image(path+"test/"+iname)
        label.append(learn.predict(img)[0])
        if (len(label)%350 == 0):
            print(f'{len(label)} images done!')
    submissions = pd.DataFrame({'Image':id_list,'target':label})#, 'res': label_res, 'dense': label_dense})
    submissions.to_csv(string+"_submit.csv",index = False)
    return label

tfms = get_transforms(do_flip = True, max_lighting = 0.2, max_zoom= 1.1, max_warp = 0.15, max_rotate = 45)
data = ImageDataBunch.from_csv(path, folder= 'train/', 
                              valid_pct = 0.0,
                              csv_labels = 'train.csv',
                              ds_tfms = tfms, 
                              fn_col = 'Image',
                              #test = 'train_SOaYf6m/images', 
                              label_col = 'target',
                              bs = 16,
                              size = 300).normalize(imagenet_stats)

fbeta = FBeta(average='weighted', beta = 1)
learn = cnn_learner(data, models.resnet101, metrics=[accuracy, fbeta])

import warnings
warnings. filterwarnings('ignore')
learn.fit(epochs = 30, lr = 1e-3)

sub = pd.read_csv('submission.csv')
sub['res_101'] = generateSubmission(learn, 'res_101')
sub['res_101'] = sub['res_101'].astype('int')
print(sub.head())

del learn
learn1 = cnn_learner(data, models.resnet50, metrics=[accuracy, fbeta])
learn1.fit(epochs = 30, lr = 1e-3)

learn2 = cnn_learner(data, models.densenet121, metrics=[accuracy, fbeta])
learn2.fit(epochs = 30, lr = 1e-3)

learn3 = cnn_learner(data, models.densenet161, metrics=[accuracy, fbeta])
learn3.fit(epochs = 30, lr = 1e-3)

sub = pd.read_csv('submission.csv')
sub['res_101'] = generateSubmission(learn, 'res_101')
sub['res_101'] = sub['res_101'].astype('int')
print(sub.head())

FINAL_PATH='dataset/test'
def write__():
  with open('submission.csv',"w") as f:
    f.write('Image,target,model,model1,model2,model3,model4\n')
  for files in os.listdir(FINAL_PATH):
    with open('submission.csv',"a" ) as f:
        f.write(f'{files}\n')

write__()

path = 'dataset/'
test_path = path+'test/'
def generateSubmission():
    with open('submission.csv',"w") as f:
        f.write('Image,target,res_101,res_50,dense_121,dense_161,res_152\n')
    id_list=list(test.Image)
    label=[]
    for iname in id_list:
        img=open_image(path+"test/"+iname)
        label=learn.predict(img)[0]
        
        with open('submission.csv','a') as f:
            f.write(f'{iname},{learn.predict(img)[0]},{learn1.predict(img)[0]},{learn2.predict(img)[0]},{learn3.predict(img)[0]},{learn4.predict(img)[0]}\n')
    
generateSubmission(learn2)

learn4 = cnn_learner(data, models.resnet152, metrics=[accuracy, fbeta])
learn4.fit(epochs = 30, lr = 1e-3)